name: "VGG16_CFM_T3"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'rois'
  top: 'masks'
  top: 'bbox_labels'
  top: 'mask_labels'
  top: 'bbox_targets'
  top: 'mask_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  #top: 'mask_weights'
  python_param {
    module: 'cfm.layers.InputData'
    layer: 'InputData'
    param_str: "{'num_cls': 21, 'cfm_t':'T3'}"
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

# ~~~~~~~ CFM: bboxes ~~~~~~~
layer {
  name: 'conv5_rois_1'
  type: 'Python'
  bottom: 'rois'
  bottom: 'conv5_3'
  top: 'conv5_rois_1'
  python_param {
    module: 'cfm.layers.ROIPooling'
    layer: 'ROIPooling'
    # spatial_scale = conv5_3/input = 14/224 = 0.0625
    param_str: "{'pooled_w': 7, 'pooled_h':7, 'spatial_scale': 0.0625}"
  }
}
layer {
  name: "fc6_b"
  type: "InnerProduct"
  bottom: "conv5_rois_1"
  top: "fc6_b"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6_b"
  top: "fc6_b"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_b"
  top: "fc6_b"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_b"
  type: "InnerProduct"
  bottom: "fc6_b"
  top: "fc7_b"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7_b"
  top: "fc7_b"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_b"
  top: "fc7_b"
  dropout_param {
    dropout_ratio: 0.5
  }
}
#~~~~~~~ CFM: masks ~~~~~~~
layer {
  name: 'conv5_rois_2'
  type: 'Python'
  bottom: 'rois'
  bottom: 'conv5_3'
  top: 'conv5_rois_2'
  python_param {
    module: 'cfm.layers.ROIPooling'
    layer: 'ROIPooling'
    # spatial_scale = conv5_3/input = 14/224 = 0.0625
    param_str: "{'pooled_w': 14, 'pooled_h':14, 'spatial_scale': 0.0625}"
  }
}
layer {
  name: 'conv5_masks'
  type: 'Python'
  #bottom: 'rois'
  bottom: 'masks'
  bottom: 'conv5_rois_2'  
  top: 'conv5_masks'
  python_param {
    module: 'cfm.layers.MaskPooling'
    layer: 'MaskPooling'
  }
}
layer {
  name: "conv5_masks_pool"
  type: "Pooling"
  bottom: "conv5_masks"
  top: "conv5_masks_pool"
  pooling_param {
    kernel_size: 2
    stride: 2
    pad: 0
    pool: MAX
  }
}
layer {
  name: "fc6_s"
  type: "InnerProduct"
  bottom: "conv5_masks_pool"
  top: "fc6_s"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6_s"
  top: "fc6_s"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_s"
  top: "fc6_s"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_s"
  type: "InnerProduct"
  bottom: "fc6_s"
  top: "fc7_s"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7_s"
  top: "fc7_s"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_s"
  top: "fc7_s"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# ~~~~~~~ concat: masks+bbxes ~~~~~~~
layer{
  name: "concat"
  type: "Concat"
  bottom: "fc7_b"
  bottom: "fc7_s"
  top: "fc7_concat"
  concat_param {
    axis: 1
  }
}
# ~~~~~~~ Bbox classification ~~~~~~~
layer {
  name: "bbox_score"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "bbox_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 21 # pascal_cls 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# ~~~~~~~ Bbox prediction ~~~~~~~
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 84 # 21*4
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# ~~~~~~~ Mask classification ~~~~~~~
layer {
  name: "mask_score"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "mask_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 21 # pascal_cls 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# ~~~~~~~ Mask prediction ~~~~~~~
layer {
  name: "fc6_mask_pred"
  type: "InnerProduct"
  bottom: "conv5_rois_2"
  top: "fc6_mask_pred"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6_pred"
  type: "ReLU"
  bottom: "fc6_mask_pred"
  top: "fc6_mask_pred"
}
layer {
  name: "mask_pred"
  type: "InnerProduct"
  bottom: "fc6_mask_pred"
  top: "mask_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 441 # 21*21=21^2
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# ~~~~~~~ Loss bbox ~~~~~~~
layer {
  name: "bbox_cls_loss"
  type: "SoftmaxWithLoss"
  bottom: "bbox_score"
  bottom: "bbox_labels"  
  propagate_down: 1
  propagate_down: 0
  top: "bbox_cls_loss"
  loss_weight: 1
}
layer {
  name: "bbox_xy_loss"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "bbox_xy_loss"
  loss_weight: 1
}
# ~~~~~~~ Loss mask ~~~~~~~
layer {
  name: "mask_cls_loss"
  type: "SoftmaxWithLoss"
  bottom: "mask_score"
  bottom: "mask_labels"  
  propagate_down: 1
  propagate_down: 0
  top: "mask_cls_loss"
  loss_weight: 1
}
layer {
  name: "mask_bit_loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mask_pred"
  bottom: "mask_targets"
  #bottom: "mask_weights"
  top: "mask_bit_loss"
  propagate_down: 1
  propagate_down: 0
  #propagate_down: 0
  loss_weight: 0.00453514739229024943310657596372 # (2/21x21)
}

# ~~~~~~~ Accuracy: bbox & mask ~~~~~~~
layer {
  name: "bbox_accuracy"
  type: "Accuracy"
  bottom: "bbox_score"
  bottom: "bbox_labels"
  top: "bbox_accuracy"
}
layer {
  name: "mask_accuracy"
  type: "Accuracy"
  bottom: "mask_score"
  bottom: "mask_labels"
  top: "mask_accuracy"
}