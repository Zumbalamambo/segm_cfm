name: "AlexNet_CFM_T2"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'rois'
  top: 'masks'
  top: 'bbox_labels'
  top: 'mask_labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'cfm.layers.InputData'
    layer: 'InputData'
    param_str: "{'num_cls': 21, 'cfm_t':'T2'}"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
# ~~~~~~~ CFM: bboxes ~~~~~~~
layer {
  name: 'conv5_rois_1'
  type: 'Python'
  bottom: 'rois'
  bottom: 'conv5'
  top: 'conv5_rois_1'
  python_param {
    module: 'cfm.layers.ROIPooling'
    layer: 'ROIPooling'
    param_str: "{'pooled_w': 7, 'pooled_h':7, 'spatial_scale': 0.0625}"
  }
}
layer {
  name: "fc6_b"
  type: "InnerProduct"
  bottom: "conv5_rois_1"
  top: "fc6_b"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6_b"
  top: "fc6_b"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_b"
  top: "fc6_b"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_b"
  type: "InnerProduct"
  bottom: "fc6_b"
  top: "fc7_b"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7_b"
  top: "fc7_b"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_b"
  top: "fc7_b"
  dropout_param {
    dropout_ratio: 0.5
  }
}
#~~~~~~~ CFM: masks ~~~~~~~
layer {
  name: 'conv5_rois_2'
  type: 'Python'
  bottom: 'rois'
  bottom: 'conv5'
  top: 'conv5_rois_2'
  python_param {
    module: 'cfm.layers.ROIPooling'
    layer: 'ROIPooling'
    param_str: "{'pooled_w': 14, 'pooled_h':14, 'spatial_scale': 0.0625}"
  }
}
layer {
  name: 'conv5_masks'
  type: 'Python'
  #bottom: 'rois'
  bottom: 'masks'
  bottom: 'conv5_rois_2'  
  top: 'conv5_masks'
  python_param {
    module: 'cfm.layers.MaskPooling'
    layer: 'MaskPooling'
  }
}
layer {
  name: "conv5_masks_pool"
  type: "Pooling"
  bottom: "conv5_masks"
  top: "conv5_masks_pool"
  pooling_param {
    kernel_size: 2
    stride: 2
    pad: 0
    pool: MAX
  }
}
layer {
  name: "fc6_s"
  type: "InnerProduct"
  bottom: "conv5_masks_pool"
  top: "fc6_s"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6_s"
  top: "fc6_s"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_s"
  top: "fc6_s"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_s"
  type: "InnerProduct"
  bottom: "fc6_s"
  top: "fc7_s"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7_s"
  top: "fc7_s"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_s"
  top: "fc7_s"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# ~~~~~~~ concat: masks+bbxes ~~~~~~~
layer{
  name: "concat"
  type: "Concat"
  bottom: "fc7_b"
  bottom: "fc7_s"
  top: "fc7_concat"
  concat_param {
    axis: 1
  }
}
# ~~~~~~~ Bbox classification ~~~~~~~
layer {
  name: "bbox_score"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "bbox_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 21 # pascal_cls 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# ~~~~~~~ Bbox prediction ~~~~~~~
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "bbox_pred"
  param {
    name: "bbox_pred_w" 
    lr_mult: 1
  }
  param {
    name: "bbox_pred_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 84 # 21*4
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# ~~~~~~~ Mask classification ~~~~~~~
layer {
  name: "mask_score"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "mask_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 21 # pascal_cls 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# ~~~~~~~ Loss bbox ~~~~~~~
layer {
  name: "bbox_cls_loss"
  type: "SoftmaxWithLoss"
  bottom: "bbox_score"
  bottom: "bbox_labels"  
  propagate_down: 1
  propagate_down: 0
  top: "bbox_cls_loss"
  loss_weight: 1
}
layer {
  name: "bbox_xy_loss"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "bbox_xy_loss"
  loss_weight: 1
}
# ~~~~~~~ Loss mask ~~~~~~~
layer {
  name: "mask_cls_loss"
  type: "SoftmaxWithLoss"
  bottom: "mask_score"
  bottom: "mask_labels"  
  propagate_down: 1
  propagate_down: 0
  top: "mask_cls_loss"
  loss_weight: 1
}

# ~~~~~~~ Accuracy: bbox & mask ~~~~~~~
layer {
  name: "bbox_accuracy"
  type: "Accuracy"
  bottom: "bbox_score"
  bottom: "bbox_labels"
  top: "bbox_accuracy"
}
layer {
  name: "mask_accuracy"
  type: "Accuracy"
  bottom: "mask_score"
  bottom: "mask_labels"
  top: "mask_accuracy"
}
